# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15maeOnY98byEncbdKSZ2ea-FwBgOAF78
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('/content/Startup_Scoring_Dataset.csv')
df.head()

features = ['team_experience','market_size_million_usd','monthly_active_users','monthly_burn_rate_inr','funds_raised_inr','valuation_inr']

df_norm=df.copy()

scaler = MinMaxScaler()

df_norm[features] = scaler.fit_transform(df_norm[features])

df_norm['monthly_active_users'] = 1 - df_norm['monthly_active_users']

df_norm.head()

weights = {
    'team_experience': 0.15,
    'market_size_million_usd': 0.20,
    'monthly_active_users': 0.25,
    'monthly_burn_rate_inr': 0.10,
    'funds_raised_inr': 0.15,
    'valuation_inr': 0.15
}

# Apply weights and compute score out of 100
df_norm['score'] = (
    df_norm['team_experience'] * weights['team_experience'] +
    df_norm['market_size_million_usd'] * weights['market_size_million_usd'] +
    df_norm['monthly_active_users'] * weights['monthly_active_users'] +
    df_norm['monthly_burn_rate_inr'] * weights['monthly_burn_rate_inr'] +
    df_norm['funds_raised_inr'] * weights['funds_raised_inr'] +
    df_norm['valuation_inr'] * weights['valuation_inr']
) * 100

df_norm[['startup_id', 'score']].head()

df_norm['rank'] = df_norm['score'].rank(ascending=False).astype(int)
df_ranked = df_norm.sort_values(by='score', ascending=False).reset_index(drop=True)

top_10 = df_ranked.head(10)
bottom_10 = df_ranked.tail(10)

top_10[['startup_id', 'score', 'rank']]

# Bar chart of scores
plt.figure(figsize=(12, 6))
sns.barplot(x='rank', y='score', data=df_ranked)
plt.title("Startup Scores Ranked")
plt.xlabel("Rank")
plt.ylabel("Score")
plt.show()

# Correlation heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df[features].corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()

# Score distribution
plt.figure(figsize=(8,5))
sns.histplot(df_ranked['score'], bins=10, kde=True)
plt.title("Score Distribution")
plt.xlabel("Score")
plt.ylabel("Count")
plt.show()

print("Highest scoring startup:")
print(top_10[['startup_id', 'score']].iloc[0])
print("\nLowest scoring startup:")
print(bottom_10[['startup_id', 'score']].iloc[-1])

